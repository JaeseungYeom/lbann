////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2014-2019, Lawrence Livermore National Security, LLC.
// Produced at the Lawrence Livermore National Laboratory.
// Written by the LBANN Research Team (B. Van Essen, et al.) listed in
// the CONTRIBUTORS file. <lbann-dev@llnl.gov>
//
// LLNL-CODE-697807.
// All rights reserved.
//
// This file is part of LBANN: Livermore Big Artificial Neural Network
// Toolkit. For details, see http://software.llnl.gov/LBANN or
// https://github.com/LLNL/LBANN.
//
// Licensed under the Apache License, Version 2.0 (the "Licensee"); you
// may not use this file except in compliance with the License.  You may
// obtain a copy of the License at:
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the license.
////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";

package lbann_data;

import "callbacks.proto";
import "layers.proto";

message LbannPB {
  DataReader data_reader = 1;
  Model model = 2;
  Optimizer optimizer = 3;
  DataSetMetaData data_set_metadata = 5;
}

//========================================================================
// DataReaders
//========================================================================
message DataReader {
  int64 max_par_io_size = 1;
  repeated Reader reader = 2;
  bool requires_data_set_metadata = 3;
}

message Reader {
  string name = 1; //mnist, nci, nci_regression, numpy, imagenet, synthetic, merge_samples
  string role = 3; //train, validation, test
  bool shuffle = 4;
  string data_filedir = 5;
  string data_local_filedir = 50; //to support data_store
  string data_filename = 6;
  string label_filename = 7;
  string index_list = 8;
  double validation_percent = 9;
  int64 absolute_sample_count = 11;
  int64 first_n = 200;
  double percent_of_data_to_use = 12;

  //for GAN model
  bool gan_labelling = 201;
  int32 gan_label_value = 202;

  int32 num_labels = 99; //for imagenet and synthetic
  int64 num_samples = 100; //only for synthetic
  string synth_dimensions = 101; //only for synthetic
  string synth_response_dimensions = 115; //only for synthetic
  //csv attributes
  string separator = 102;
  int32 skip_cols = 103;
  int32 skip_rows = 104;
  bool has_header = 105;
  int32 label_col = 106;
  int32 response_col = 107;
  bool disable_labels = 108;
  bool disable_responses = 109;
  string format = 110; // numpy, csv
  string data_file_pattern = 111;
  int64 num_neighbors = 112; // pilot2_molecular_reader
  int64 max_neighborhood = 113; // pilot2_molecular_reader
  int32 num_image_srcs = 114; // data_reader_multi_images
  float scaling_factor_int16 = 116; // for numpy_npz_reader with int16 data

  int32 max_files_to_load = 1000;

  //------------- start of only for partitioned data sets ------------------
  bool is_partitioned = 300;
  double partition_overlap = 301;
  int32 partition_mode = 302;
       // 1 - share a portion of your data with two neighbors;
       // 2 - there's a set of overlap indices that are common to all models
  //------------- end of only for partitioned data sets ------------------

  //------------- start of only for index lists ------------------
  bool index_list_per_trainer = 400;
  bool index_list_per_model   = 401;
  //------------- end of only for index lists ------------------

  PythonDataReader python = 501;

  repeated Transform transforms = 600;  // Ordered list of transforms to apply.
}

message PythonDataReader {
  string module = 1;                // Python module
  string module_dir = 2;            // Directory containing Python module
  string sample_function = 3;       // Function that gets data sample
  string num_samples_function = 4;  // Function that gets number of data samples
  string sample_dims_function = 5;  // Function that gets dimensions of data sample
}

// Preprocessing transforms.
message Transform {
  // Transforms that apply to LBANN data.
  // Normalize channel-wise with mean and standard deviation.
  message Normalize {
    string means = 1;
    string stddevs = 2;
  }
  // Normalize each sample to have mean 0, standard deviation 1.
  message SampleNormalize {}
  // Scale by a constant.
  message Scale {
    float scale = 1;
  }

  // Transforms that apply to images.
  // Adjust the brightness of an image.
  message AdjustBrightness {
    float factor = 1;
  }
  // Adjust the contrast of an image.
  message AdjustContrast {
    float factor = 1;
  }
  // Adjust the saturation of an image.
  message AdjustSaturation {
    float factor = 1;
  }
  // Crop of size height x width from the center.
  message CenterCrop {
    uint64 height = 1;
    uint64 width = 2;
  }
  // Convert to color.
  message Colorize {}
  // Randomly jitter brightness/contrast/saturation.
  message ColorJitter {
    float min_brightness_factor = 1;
    float max_brightness_factor = 2;
    float min_contrast_factor = 3;
    float max_contrast_factor = 4;
    float min_saturation_factor = 5;
    float max_saturation_factor = 6;
  }
  // Apply cutout augmentation.
  message Cutout {
    uint64 num_holes = 1;
    uint64 length = 2;
  }
  // Convert to grayscale.
  message Grayscale {}
  // Horizontal flip with probability p.
  message HorizontalFlip {
    float p = 1;
  }
  // Fused Normalize + ToLBANNLayout.
  message NormalizeToLBANNLayout {
    string means = 1;
    string stddevs = 2;
  }
  // Apply a random affine transform.
  message RandomAffine {
    float rotate_min = 1;
    float rotate_max = 2;
    float translate_h = 3;
    float translate_w = 4;
    float scale_min = 5;
    float scale_max = 6;
    float shear_min = 7;
    float shear_max = 8;
  }
  // Crop of size height x width from a random location.
  message RandomCrop {
    uint64 height = 1;
    uint64 width = 2;
  }
  // Random crop with scale and aspect ratio augmentation.
  message RandomResizedCrop {
    uint64 height = 1;
    uint64 width = 2;
    float scale_min = 3;
    float scale_max = 4;
    float ar_min = 5;
    float ar_max = 6;
  }
  // Resize to height x width, then randomly crop to crop_height x crop_width.
  message RandomResizedCropWithFixedAspectRatio {
    uint64 height = 1;
    uint64 width = 2;
    uint64 crop_height = 3;
    uint64 crop_width = 4;
  }
  // Resize to height x width.
  message Resize {
    uint64 height = 1;
    uint64 width = 2;
  }
  // Resize to height x width then crop to crop_height x crop_width at the center.
  message ResizedCenterCrop {
    uint64 height = 1;
    uint64 width = 2;
    uint64 crop_height = 3;
    uint64 crop_width = 4;
  }
  // Convert from an image to LBANN data.
  message ToLBANNLayout { }
  // Vertical flip with probability p.
  message VerticalFlip {
    float p = 1;
  }

  oneof a_transform {
    // On LBANN data:
    Normalize normalize = 1;
    SampleNormalize sample_normalize = 2;
    Scale scale = 3;

    // On images:
    CenterCrop center_crop = 100;
    Colorize colorize = 101;
    Grayscale grayscale = 102;
    HorizontalFlip horizontal_flip = 103;
    NormalizeToLBANNLayout normalize_to_lbann_layout = 104;
    RandomAffine random_affine = 105;
    RandomCrop random_crop = 106;
    RandomResizedCrop random_resized_crop = 107;
    RandomResizedCropWithFixedAspectRatio random_resized_crop_with_fixed_aspect_ratio = 108;
    Resize resize = 109;
    ResizedCenterCrop resized_center_crop = 110;
    ToLBANNLayout to_lbann_layout = 111;
    VerticalFlip vertical_flip = 112;
    AdjustBrightness adjust_brightness = 113;
    AdjustContrast adjust_contrast = 114;
    AdjustSaturation adjust_saturation = 115;
    ColorJitter color_jitter = 116;
    Cutout cutout = 117;
  }
}

//========================================================================
// Metadata for a Data set
//========================================================================
message DataSetMetaData {
  message Schema {
    string scalar_prefix = 1;
    string image_prefix = 2;
    string input_prefix = 3;

    uint64 image_height = 11;
    uint64 image_width = 12;
    uint64 image_num_channels = 13;

    //------------------ start of only for jag_conduit -----------------------
    bool split_jag_image_channels = 89;
    repeated string jag_image_keys = 90;
    repeated string jag_scalar_keys = 91;
    repeated string jag_input_keys = 92;
    message JagKeyPrefixFilter {
      string key_prefix = 1;
      uint32 min_len = 2;
    }
    repeated string jag_scalar_filters = 93;
    repeated JagKeyPrefixFilter jag_scalar_prefix_filters = 94;
    repeated string jag_input_filters = 95;
    repeated JagKeyPrefixFilter jag_input_prefix_filters = 96;

    enum JAG_Data {
      Undefined  = 0;
      JAG_Image  = 1;
      JAG_Scalar = 2;
      JAG_Input  = 3;
    }
    message JAGDataSlice {
      repeated JAG_Data pieces = 1;
    }
    repeated JAGDataSlice independent = 97;
    repeated JAGDataSlice dependent = 98;
    //------------------  end of only for jag_conduit  -----------------------
  }

  message Normalization {
    //------------------ start of only for jag_conduit -----------------------
    message JagLinearNormalizationParams {
      double scale = 1;
      double bias = 2;
    }

    repeated JagLinearNormalizationParams jag_image_normalization_params = 86;
    repeated JagLinearNormalizationParams jag_scalar_normalization_params = 87;
    repeated JagLinearNormalizationParams jag_input_normalization_params = 88;

    //------------------  end of only for jag_conduit  -----------------------
  }
    Schema schema = 1;
  Normalization normalization = 2;
}

//========================================================================
// Model
//========================================================================

message Model {
  string type = 1;
  string name = 3;
  ObjectiveFunction objective_function = 2;
  repeated Metric metric = 5;
  string data_layout = 6;
  bool shareable_training_data_reader = 42; // Can the data reader be shared across multiple models( e.g. GAN)
  bool shareable_testing_data_reader = 43; // Can the data reader be shared across multiple models (e.g. GAN)
  bool shareable_validation_data_reader = 44; // Can the data reader be shared across multiple models (e.g. GAN)

  int64 mini_batch_size = 12;
  int64 num_epochs = 4;
  int64 super_steps = 121; //multiple steps/epochs currently use in GAN
  int64 num_batches = 122; //multiple batches/sub epoch
  int64 block_size = 50;
  int64 procs_per_trainer = 51;
  int64 num_gpus = 53; //has no effect
  int64 evaluation_frequency = 54;
  int64 num_parallel_readers = 100;
  bool  serialize_io = 101;

  bool disable_cuda = 8;

  repeated Layer layer = 10;

  repeated Weights weights = 11;

  repeated Callback callback = 20;

  int64 random_seed = 30;
  // If true, models will have their model rank mixed into their random seed.
  bool random_init_models_differently = 31;

}

//========================================================================
// Objective function
//========================================================================

message ObjectiveFunction {
  repeated LayerTerm layer_term = 1;
  repeated L2WeightRegularization l2_weight_regularization = 2;
}

message LayerTerm {
  double scale_factor = 1;
  string layer = 2;
}

message L2WeightRegularization {
  double scale_factor = 1;
  string weights = 2;   // If empty, L2 regularization is applied to all weights
}

//========================================================================
// Metrics
//========================================================================

message Metric {
  LayerMetric layer_metric = 11;
}

message LayerMetric {
  string layer = 1;
  string name = 2;
  string unit = 3;
}

//========================================================================
// Optimizers
//========================================================================
message Optimizer {
  oneof optimizer_type {
    AdaGrad adagrad = 1;
    Adam adam = 2;
    HypergradientAdam hypergradient_adam = 3;
    RMSprop rmsprop = 4;
    SGD sgd = 5;
  }
}

message AdaGrad {
  double learn_rate = 1;
  double eps = 2;           // Suggested: 1e-8
}

message Adam {
  double learn_rate = 1;
  double beta1 = 6;         // Suggested: 0.9
  double beta2 = 7;         // Suggested: 0.99
  double eps = 8;           // Suggested: 1e-8
}

message HypergradientAdam {
  double init_learning_rate = 1;
  double hyper_learning_rate = 2;   // Suggested: 1e-7
  double beta1 = 6;                 // Suggested: 0.9
  double beta2 = 7;                 // Suggested: 0.99
  double eps = 8;                   // Suggested: 1e-8
}

message RMSprop {
  double learn_rate = 1;
  double decay_rate = 2;
  double eps = 3;           // Suggested: 1e-8
}

message SGD {
  double learn_rate = 1;
  double momentum = 2;      // Set to zero for vanilla SGD
  bool nesterov = 4;
}

//========================================================================
// Weights
//========================================================================

message Weights {

  string name = 1;
  Optimizer optimizer = 2;

  ConstantInitializer constant_initializer = 20;
  ValueInitializer value_initializer = 21;
  UniformInitializer uniform_initializer = 22;
  NormalInitializer normal_initializer = 23;
  GlorotNormalInitializer glorot_normal_initializer = 24;
  GlorotUniformInitializer glorot_uniform_initializer = 25;
  HeNormalInitializer he_normal_initializer = 26;
  HeUniformInitializer he_uniform_initializer = 27;
  LeCunNormalInitializer lecun_normal_initializer = 28;
  LeCunUniformInitializer lecun_uniform_initializer = 29;

}

// Weight initializers
message ConstantInitializer {
  double value = 1;
}
message ValueInitializer {
  string values = 1;
}
message UniformInitializer {
  double min = 1;
  double max = 2;
}
message NormalInitializer {
  double mean = 1;
  double standard_deviation = 2;
}
message GlorotNormalInitializer {}
message GlorotUniformInitializer {}
message HeNormalInitializer {}
message HeUniformInitializer {}
message LeCunNormalInitializer {}
message LeCunUniformInitializer {}
